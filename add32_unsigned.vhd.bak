library ieee;
use ieee.std_logic_1164.all;
entity fa1 is
    Port ( A, B, Cin : in std_logic;
           S, Cout : out std_logic);
end entity;

architecture behavioral of fa1 is
begin
    process (A, B, Cin)
    begin
        S <= A xor B xor Cin;
        Cout <= (A and B) or (B and Cin) or (Cin and A);
    end process;
end architecture;

library ieee;
use ieee.std_logic_1164.all;
entity add32 is
port(A, B : in std_logic_vector (31 downto 0);
     S: out std_logic_vector (31 downto 0);
     Cin :in std_logic;
     Cout :out std_logic
     );
end entity;
architecture behavioral of add32 is
component fa1 is
    Port ( A, B, Cin : in STD_LOGIC;
           S, Cout : out STD_LOGIC);
end component;
signal iC: std_logic_vector (30 downto 0);
begin
fadd0: fa1
    port map(A=>A(0), B=>B(0), Cin=>Cin, S=>S(0), Cout=>iC(0));
gen1: for i in 1 to 30 generate
  fadd1: fa1
    port map(A=>A(i), B=>B(i), Cin=>iC(i-1), S=>S(i), Cout=>iC(i));
end generate;
fadd2: fa1
    port map(A=>A(31), B=>B(31), Cin=>iC(30), S=>S(31), Cout=>Cout);
end architecture;

